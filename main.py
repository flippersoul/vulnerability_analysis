# -*- coding: utf-8 -*-
import csv
import re
from packaging import version
import nmap
import sys
import os
import tkinter as tk

class Application(tk.Tk):
    def __init__(self):
            super().__init__()
            self.title("Анализ уязвимостей. Автор: Скворцов П.Д.")
            self.resizable(0, 0)  # отключение возможности изменять размер окна

            # Создание элементов интерфейса
            self.label_ip = tk.Label(self, text="Введите IP-адрес:")
            self.label_ip.pack()
            self.entry_ip = tk.Entry(self)
            self.entry_ip.pack()
            self.button_scan = tk.Button(self, text="Анализировать уязвимости", command=self.scan)
            self.button_scan.pack()
            self.text_result = tk.Text(self)
            self.text_result.pack()

    def scan(self):
        # Получение введенного IP-адреса из элемента Entry
        network_prefix = self.entry_ip.get()

        # Выполнение сканирования nmap и анализ полученных данных
        nm = nmap.PortScanner()
        scan_raw_result = nm.scan(hosts=network_prefix, arguments='-v -n -A')
        for host, result in scan_raw_result['scan'].items():
            if result['status']['state'] == 'up':
                self.text_result.insert(tk.END, '#' * 17 + 'Host:' + host + '#' * 17 + '\n')
                idno = 1
                try:
                    for port in result['tcp']:
                        try:
                            self.text_result.insert(tk.END, '-' * 17 + "Детали TCP-сервера" + '[' + str(idno) + ']' + '-' * 17 + '\n')
                            idno += 1
                            self.text_result.insert(tk.END, 'Номер порта TCP:' + str(port) + '\n')
                            try:
                                self.text_result.insert(tk.END, 'Положение дел:' + result['tcp'][port]['state'] + '\n')
                            except:
                                pass
                            try:
                                self.text_result.insert(tk.END, 'Причина:' + result['tcp'][port]['reason'] + '\n')
                            except:
                                pass
                            try:
                                self.text_result.insert(tk.END, 'Дополнительная информация:' + result['tcp'][port]['extrainfo'] + '\n')
                            except:
                                pass
                            try:
                                self.text_result.insert(tk.END, 'Имя:' + result['tcp'][port]['name'] + '\n')
                            except:
                                pass
                            try:
                                cur_ver = result['tcp'][port]['version']
                                self.text_result.insert(tk.END, 'Версия:' + cur_ver + '\n')
                            except:
                                pass
                            try:
                                cur_soft_title = result['tcp'][port]['name']
                                BDU_check(cur_soft_title, cur_ver)
                            except:
                                pass
                        except Exception as e:
                            print(e)
                            continue
                except:
                    pass

def BDU_check(cur_soft_title, cur_ver):
    with open('vullist_1.csv', encoding='utf-8') as csvfile:
        # print(123)
        reader = csv.DictReader(csvfile)
        i = 0
        for row in reader:
            soft_title = str(row['Название ПО'])
            versions = row['Версия ПО']
            if cur_soft_title.lower() in soft_title.lower():
                cve_row = row['Идентификаторы других систем описаний уязвимости']
                for current_service_version in versions.split(','):

                    # нижняя граница версии
                    if 'от' in current_service_version:
                        begin_version = re.search('[^\d.]?[\d.]+[^\d.]?', str(current_service_version)+' ')[0]
                        while re.search('[\d]', begin_version[0]) is None:
                            begin_version = begin_version[1:]
                        while re.search("[\d]", begin_version[-1]) is None:
                            begin_version = begin_version[:-1]

                    if 'до' in current_service_version:
                        end_version = re.search('[^\d.]?[\d.]+[^\d.]?', str(current_service_version)+ ' ')
                        end_version = end_version[0]

                        while re.search('[^\d]', end_version[0]):
                            end_version = end_version[1:]
                        while re.search('[^\d]', end_version[-1]):
                            end_version = end_version[:-1]

                        cur_ver = re.search('[^\d.]?[\d.]+[^\d.]?', str(cur_ver)+ ' ')
                        cur_ver = cur_ver[0]

                        while re.search('[^\d]', cur_ver[0]):
                             end_version = end_version[1:]
                        while re.search('[^\d]', cur_ver[-1]):
                             cur_ver = cur_ver[:-1]
                    flag_begin_vesion = (begin_version and (not end_version) and (version.parse(begin_version) <= version.parse(cur_ver)))
                    flag_end_vesion = ((not begin_version) and (end_version) and (version.parse(cur_ver) <= version.parse(end_version)))
                    flag_both_vesion = (begin_version and (end_version) and (version.parse(begin_version) <= version.parse(cur_ver)) and (version.parse(cur_ver) <= version.parse(end_version)))
                    
                    if flag_begin_vesion or flag_end_vesion or flag_both_vesion:
                        print('Идентификатор         : ' + str(row['Идентификатор']))
                        print('CVE                   : ' + str(cve_row))
                        print('Название ПО             : '+ str(row['Название ПО']))
                        print('Версия ПО             : '+ str(row['Версия ПО']))
                        print('Версия ПО общ. признак: '+ str(current_service_version))
                        print('Описание уязвимости   : ' + str(row['Описание уязвимости']))
                        print('----------------------------\n')
                        break
            i += 1

if __name__ == '__main__':
    app = Application()
    app.mainloop()

